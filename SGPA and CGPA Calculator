import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class GPAApp1 {

    private JFrame frame;
    private JTextField numSemestersField;
    private JButton calculateButton;
    private JLabel resultLabel;

    public GPAApp1() {
        frame = new JFrame("GPA Calculator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.setLayout(new FlowLayout());

        createUI();

        frame.setVisible(true);
    }

    private void createUI() {
        JLabel numSemestersLabel = new JLabel("Enter the number of semesters:");
        frame.add(numSemestersLabel);

        numSemestersField = new JTextField(5);
        frame.add(numSemestersField);

        calculateButton = new JButton("Calculate CGPA");
        frame.add(calculateButton);

        resultLabel = new JLabel();
        frame.add(resultLabel);

        calculateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calculateCGPA();
            }
        });
    }

    private void calculateCGPA() {
        try {
            int numSemesters = Integer.parseInt(numSemestersField.getText());

            if (numSemesters <= 0) {
                showError("Number of semesters must be greater than 0.");
                return;
            }

            double totalGradePoints = 0.0;
            double totalCredits = 0.0;
            StringBuilder sgpaDetails = new StringBuilder();

            for (int sem = 1; sem <= numSemesters; sem++) {
                int numSubjects = getInput1("Enter the number of subjects for semester " + sem + ":", "Invalid input for number of subjects");
                if (numSubjects <= 0) {
                    showError("Number of subjects must be greater than 0.");
                    return;
                }

                double semesterGradePoints = 0.0;
                double semesterCredits = 0.0;

                for (int sub = 1; sub <= numSubjects; sub++) {
                    int credits = getInput1("Enter credits for subject " + sub + " of semester " + sem + ":", "Invalid credits input");
                    if (credits <= 0) {
                        showError("Credits must be greater than 0.");
                        return;
                    }

                    double gradePoint = getInput("Enter grade out of 10 for subject " + sub + " of semester " + sem + ":", "Invalid grade input");
                    if (gradePoint < 0 || gradePoint > 10) {
                        showError("Grade must be between 0 and 10.");
                        return;
                    }

                    semesterGradePoints += gradePoint * credits;
                    semesterCredits += credits;
                }

                double sgpa = semesterGradePoints / semesterCredits;
                sgpaDetails.append("SGPA for Semester ").append(sem).append(": ").append(String.format("%.2f", sgpa)).append("\n");

                totalGradePoints += semesterGradePoints;
                totalCredits += semesterCredits;
            }

            double cgpa = totalGradePoints / totalCredits;

            resultLabel.setText("<html>" + sgpaDetails.toString().replace("\n", "<br>") + "Overall CGPA: " + String.format("%.2f", cgpa) + "</html>");

            int option = JOptionPane.showConfirmDialog(frame, "Do you want to calculate GPA again?", "Calculate CGPA",
                    JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                resetInputs();
            } else {
                showExit("Thank you for using the GPA Calculator");
                System.exit(0);
            }

        } catch (NumberFormatException ex) {
            showError("Invalid input. Please enter numeric values.");
        }
    }

    private double getInput(String message, String errorMessage) {
        try {
            return Double.parseDouble(JOptionPane.showInputDialog(message));
        } catch (NumberFormatException e) {
            showError(errorMessage);
            return -1;
        }
    }

    private int getInput1(String message, String errorMessage) {
        try {
            return Integer.parseInt(JOptionPane.showInputDialog(message));
        } catch (NumberFormatException e) {
            showError(errorMessage);
            return -1;
        }
    }

    private void resetInputs() {
        numSemestersField.setText("");
        resultLabel.setText("");
    }

    private void showError(String errorMessage) {
        JOptionPane.showMessageDialog(frame, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showExit(String message) {
        JOptionPane.showMessageDialog(frame, message, "Exit", JOptionPane.PLAIN_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(GPAApp1::new);
    }
}
